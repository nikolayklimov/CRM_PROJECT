import { Injectable, ConflictException, UnauthorizedException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';
import { JwtService } from '@nestjs/jwt';
import { User } from '../user/user.entity';
import { RegisterDto } from './dto/register.dto';
import { LoginDto } from './dto/login.dto';

@Injectable()
export class AuthService {
    constructor(
        @InjectRepository(User)
        private userRepository: Repository<User>,
        private jwtService: JwtService,
    ) {}

    async register(dto: RegisterDto): Promise<User> {
        
        console.log('üë§ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', dto.email);


        const existing = await this.userRepository.findOne({
            where: { email: dto.email },
        });

        if (existing) {
            throw new ConflictException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }

        const hashedPassword = await bcrypt.hash(dto.password, 10);

        const user = this.userRepository.create({
            password: hashedPassword,
            email: dto.email,
            name: dto.name,
            role: dto.role,  // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ dto.role —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ 'admin' | 'manager' | 'owner'
          });

        return this.userRepository.save(user);
    }

    async login(dto: LoginDto): Promise<{ access_token: string }> {
        try {
            const user = await this.userRepository.findOne({
                where: { email: dto.email },
            });

            if (!user) {
                throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }

            const isValid = await bcrypt.compare(dto.password, user.password);

            if (!isValid) {
                throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
            }

            const payload = {
                sub: user.id,
                email: user.email,
                role: user.role,
            };

            const token = await this.jwtService.signAsync(payload);

            return { access_token: token };
        } catch (err) {
            console.error('Error occurred during login:', err);
            throw new UnauthorizedException('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
        }
    }
}